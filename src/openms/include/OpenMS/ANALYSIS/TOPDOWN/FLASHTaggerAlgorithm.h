// Copyright (c) 2002-2023, The OpenMS Team -- EKU Tuebingen, ETH Zurich, and FU Berlin
// SPDX-License-Identifier: BSD-3-Clause
//
// --------------------------------------------------------------------------
// $Maintainer: Kyowon Jeong, Jaekwan Kim $
// $Authors: Kyowon Jeong, Jaekwan Kim $
// --------------------------------------------------------------------------

#pragma once

#include <OpenMS/ANALYSIS/TOPDOWN/FLASHDeconvAlgorithm.h>
#include <OpenMS/CHEMISTRY/Residue.h>
#include <OpenMS/CHEMISTRY/ResidueDB.h>
#include <OpenMS/DATASTRUCTURES/DefaultParamHandler.h>
#include <OpenMS/FORMAT/FASTAFile.h>
#include <OpenMS/METADATA/ProteinHit.h>
#include <boost/dynamic_bitset.hpp>
#include <iomanip>
#include <iostream>

namespace OpenMS
{
  /**
  @brief
  @ingroup Topdown
  */

  class OPENMS_DLLAPI FLASHTaggerAlgorithm : public DefaultParamHandler, public ProgressLogger
  {
  public:
    /// constructor
    FLASHTaggerAlgorithm();

    /// destructor
    ~FLASHTaggerAlgorithm() override = default;

    /// copy constructor
    FLASHTaggerAlgorithm(const FLASHTaggerAlgorithm&);

    /// move constructor
    FLASHTaggerAlgorithm(FLASHTaggerAlgorithm&& other) = default;

    /// assignment operator
    FLASHTaggerAlgorithm& operator=(const FLASHTaggerAlgorithm& other);

    /// Find sequence tags from @p mzs and @p intensities then store them in @p tags.
    /**
      @brief
      Decoy or MS level 1 spectra are removed by this process.
      Overlapping PeakGroups in merged spectra are also removed.
      This function triggers the void run(const DeconvolvedSpectrum& dspec, double ppm) function using 
      merged spectrum and ppm

      @param deconvolved_spectra spectra deconvolved by FLASHDeconv.
      @param ppm The acceptable ppm tolerance for mass
      @param fasta_entry fasta entry to searched against
      
    */
    void run(const std::vector<DeconvolvedSpectrum>& deconvolved_spectra, double ppm, const std::vector<FASTAFile::FASTAEntry>& fasta_entry);

    void getProteinHits(std::vector<ProteinHit>& hits) const;
    void getProteinHitsMatchedBy(const FLASHDeconvHelperStructs::Tag& tag, std::vector<ProteinHit>& hits) const;
    void getTagsMatchingTo(const ProteinHit& hit, std::vector<FLASHDeconvHelperStructs::Tag>& tags) const;
    void getTags(bool matched, std::vector<FLASHDeconvHelperStructs::Tag>& tags) const;

    int getProteinIndex(const ProteinHit& hit) const;

    static std::vector<int> getMatchedPositions(const ProteinHit& hit, const FLASHDeconvHelperStructs::Tag& tag) ;
    static std::vector<double> getDeltaMasses(const ProteinHit& hit, const FLASHDeconvHelperStructs::Tag& tag) ;

  protected:
    void updateMembers_() override;
    /// implemented for DefaultParamHandler
    void setDefaultParams_();

  private:
    class DAC_;
    /**
     @brief makes three vectors containing monoisotopic mass and score and scan numbers of each peakgroups.
     This function triggers the void run(const DeconvolvedSpectrum& dspec, double ppm) function using
     merged spectrum and ppm

      @param dspec merged spectra generated by previous run method.
      @param ppm The acceptable ppm tolerance for mass.
       @param tags found tags
    */
     void getTags_(const DeconvolvedSpectrum& dspec, double ppm, std::vector<FLASHDeconvHelperStructs::Tag>& tags);
    /**
      @brief makes three vectors containing monoisotopic mass and score and scan numbers of each peakgroups.

      @param dspec merged spectra generated by previous run method.
      @param ppm The acceptable ppm tolerance for mass.
        @param tags found tags
    */
    void getTags_(const std::vector<double>& mzs, const std::vector<int>& scores, int scan, double ppm, std::vector<FLASHDeconvHelperStructs::Tag>& tags);

    void constructDAC_(FLASHTaggerAlgorithm::DAC_& dac, const std::vector<double>& mzs, const std::vector<int>& scores, int length, double tol);
    std::vector<Residue> getAA_(double l, double r, double tol, int iso_offset = 0) const;
    void updateEdgeMasses_();
    int getVertex_(int index, int path_score, int level, int iso_level) const;
    int getIndex_(int vertex) const;

    void updateTagSet_(std::set<FLASHDeconvHelperStructs::Tag>& tag_set, std::map<String, std::vector<FLASHDeconvHelperStructs::Tag>>& seq_tag, const std::vector<int>& path, const std::vector<double>& mzs, const std::vector<int>& scores, int scan, double ppm);

    static void connectEdge_(FLASHTaggerAlgorithm::DAC_& dac, int vertex1, int vertex2, boost::dynamic_bitset<>& visited);

    static Size find_with_X_(const std::string_view& A, const String& B, Size pos = 0);

    std::set<const Residue*> aas_ = ResidueDB::getInstance()->getResidues("Natural20");
    std::map<double, std::vector<Residue>> aa_mass_map_;
    std::map<int, std::map<int, std::vector<String>>> edge_aa_map_;

    std::vector<FLASHDeconvHelperStructs::Tag> tags_; // from scan to tags
    std::vector<ProteinHit> protein_hits_;
    std::vector<std::vector<int>> matching_tags_indices_; // outer vector index = hit index
    std::vector<std::vector<int>> matching_hits_indices_; // outer vector index = tag index
    void runMatching_(const std::vector<FASTAFile::FASTAEntry>& fasta_entry);
    void calculate_qvalue_(const std::vector<FASTAFile::FASTAEntry>& fasta_entry, std::vector<std::pair<ProteinHit, std::vector<int>>>& pairs);

    int max_tag_count_ = 0;
    int min_tag_length_ = 0;
    int max_tag_length_ = 0;
    int max_iso_in_tag_ = 0;
    int max_path_score_ = 0;
    int min_path_score_ = 0;
    int min_cov_aa_ = 5;
    double fdr_ = 1.0;
    bool keep_decoy_ = false;
    double max_edge_mass_ = 0;
    double flanking_mass_tol_ = 200.0;
  };
} // namespace OpenMS